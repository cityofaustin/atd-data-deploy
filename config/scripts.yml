# Configuration file for Python scripts.
#
# Each entry specifies a Python script that will be installed as cron job and
# run by the *launcher* in the specified docker container.
#
# Contents are defined as follows:
#     - args (array, optional): The script's command line arguments
#
#     - comment (str, optional): Optional comment which is ignored.
# 
#     - cron (str, required): `cron` field definitions. See CRONTAB(5) man page.
#
#     - destination (str, optional): Required if running script as a Job. Name
#         of the destination application of this ETL process.
#
#     - docker_cmd (str, required): name of the DOCKER cmd configration that will
#         run the script. See `config/docker`. If ommitted will use "default" DOCKER
#         config
# 
#     - enabled (bool, optional): If a cron entry should written for this script.
#         If false or absent the entry will be ignored.
# 
#     - filename (str, required): The filename of the script.
#
#     - init_func(str, required): The name of function which will be imported and
#       run via the launcher. Typicall "main" or "init".
#
#     - job (bool, optional): If the script shall be registered as a "job" on the job
#         logging server. Any script that supports job logging must accept a special
#         "last_run_date" paramater to support incremental loading. See README for
#         details.
#
#     - name: Text idenfier of the script. Will be used to name the cron shell script
#         and *must be unique* to all script entries. | required
# 
#     - path (string, required): The path *relative to this repository* where the script
#         is located.
#
#     - source (str, optional): Required if running script as a Job. Name
#         of the source application of this ETL process.
#
---

# backup:
#   args:
#   - data_tracker_prod
#   cron: 50 2 * * *
#   destination: csv
#   docker_cmd: default
#   enabled: true
#   filename: backup.py
#   init_func: main
#   job: true
#   path: ../transportation-data-publishing/transportation-data-publishing/data_tracker
#   source: knack

waze_archive_postgre:
  cron: "*/5 * * * *"
  destination: postgrest
  docker_cmd: default
  enabled: true
  filename: waze_psql.py
  init_func: main
  job: true
  path: ../waze-archive
  source: waze_endpoint

